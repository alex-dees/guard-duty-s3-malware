import * as fs from 'fs';
import * as path from 'path';
import * as cdk from 'aws-cdk-lib';
import { Construct } from "constructs";
import * as handlebars from 'handlebars';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as sns from 'aws-cdk-lib/aws-sns';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as sqs from 'aws-cdk-lib/aws-sqs';
import * as evt from 'aws-cdk-lib/aws-events';
import * as gd from 'aws-cdk-lib/aws-guardduty';
import * as tgt from 'aws-cdk-lib/aws-events-targets';
import * as nodefn from 'aws-cdk-lib/aws-lambda-nodejs';

export interface S3GuardProps {
  topic?: sns.Topic,  
  src: s3.Bucket,
  dst: {
    queue?: sqs.Queue,
    bucket?: s3.Bucket
  } 
}

export class S3Guard extends Construct { 
    constructor(scope: Construct, id: string, private props: S3GuardProps) {
        super(scope, id);
        this.detect();
        this.threats();
        this.noThreats();
    }
    
    private threats() {
      const topic = this.props.topic;
        
      if (topic)
        new evt.Rule(this, 'GdRule', {
            targets: [new tgt.SnsTopic(topic)],
            eventPattern: {
                source: ['aws.guardduty'],
                detail: {
                    scanResultDetails: {
                        scanResultStatus: ['THREATS_FOUND']
                    }
                },
                detailType: ['GuardDuty Malware Protection Object Scan Result']
            }
        });
    }

    private noThreats() {
      let targets = [];
      const {src, dst} = this.props;

      // add event to queue
      if (dst.queue) 
        targets.push(new tgt.SqsQueue(dst.queue));

      // move file to other bucket
      if (dst.bucket){
        const fn = new nodefn.NodejsFunction(this, 'MvFn', {
          timeout: cdk.Duration.minutes(1),
          entry: path.join(__dirname, '../src', 'index.ts'),
          environment: { DST_BUCKET: dst.bucket.bucketName },
          bundling: {
            externalModules: [
              '@aws-sdk/*'
            ]
          }
        });
        
        src.grantRead(fn);
        src.grantDelete(fn);
        dst.bucket.grantWrite(fn);
        targets.push(new tgt.LambdaFunction(fn));
      }

      new evt.Rule(this, 'MvRule', {
        targets: targets,
        eventPattern: {
          source: ['aws.guardduty'],
          detail: {
              scanResultDetails: {
                  scanResultStatus: ['NO_THREATS_FOUND']
              }
          },
          detailType: ['GuardDuty Malware Protection Object Scan Result']
        }
      });      
    }

    private detect() {
      const name = this.props.src.bucketName;
      const stack = cdk.Stack.of(this);
      const templ = handlebars.compile(fs
          .readFileSync('policy.json')
          .toString());

      const doc = templ({
        bucket: name,  
        region: stack.region,
        account: stack.account,
        partition: stack.partition
      });
      
      // https://docs.aws.amazon.com/guardduty/latest/ug/malware-protection-s3-iam-policy-prerequisite.html#attach-iam-policy-s3-malware-protection        
      const pol = new iam.ManagedPolicy(this, 'MwPolicy', {
          document: iam.PolicyDocument.fromJson(JSON.parse(doc))
      });
    
      const svc = 'malware-protection-plan.guardduty.amazonaws.com';
      const role = new iam.Role(this, 'MwRole', {
        assumedBy: new iam.ServicePrincipal(svc),
        managedPolicies: [pol]
      });

      new gd.CfnMalwareProtectionPlan(this, 'MwPlan', {
        role: role.roleArn,
        protectedResource: {
          s3Bucket: {
            bucketName: name
          }
        },
        actions: {
          tagging: {
            status: 'ENABLED'
          }
        }
      });
    }
}