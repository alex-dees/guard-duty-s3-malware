import * as fs from 'fs';
import * as cdk from 'aws-cdk-lib';
import { Construct } from "constructs";
import * as handlebars from 'handlebars';
import * as sns from 'aws-cdk-lib/aws-sns';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as evt from 'aws-cdk-lib/aws-events';
import * as gd from 'aws-cdk-lib/aws-guardduty';
import * as tgt from 'aws-cdk-lib/aws-events-targets';

export interface S3GuardProps {
    bucketName: string,
    topic?: sns.Topic
}

export class S3Guard extends Construct { 
    constructor(scope: Construct, id: string, private props: S3GuardProps) {
        super(scope, id);
        this.detect();
        this.notify();
    }
    
    // https://docs.aws.amazon.com/guardduty/latest/ug/malware-protection-s3-iam-policy-prerequisite.html#attach-iam-policy-s3-malware-protection
    private detect() {
        const stack = cdk.Stack.of(this);
        const templ = handlebars.compile(fs
            .readFileSync('policy.json')
            .toString());

        const doc = templ({
            region: stack.region,
            account: stack.account,
            partition: stack.partition,
            bucket: this.props.bucketName
        });
        
        const pol = new iam.ManagedPolicy(this, 'Policy', {
            document: iam.PolicyDocument.fromJson(JSON.parse(doc))
        });
    
        const svc = 'malware-protection-plan.guardduty.amazonaws.com';
        const role = new iam.Role(this, 'Role', {
          assumedBy: new iam.ServicePrincipal(svc),
          managedPolicies: [pol]
        });    

        new gd.CfnMalwareProtectionPlan(this, 'Plan', {
          role: role.roleArn,
          protectedResource: {
            s3Bucket: {
              bucketName: this.props.bucketName
            }
          },
          actions: {
            tagging: {
              status: 'ENABLED'
            }
          }
        });
    }

    private notify() {
        const topic = this.props.topic;
        
        if (topic)
            new evt.Rule(this, 'Rule', {
                targets: [new tgt.SnsTopic(topic)],
                eventPattern: {
                    source: ['aws.guardduty'],
                    detail: {
                        scanResultDetails: {
                            scanResultStatus: ['THREATS_FOUND']
                        }
                    },
                    detailType: ['GuardDuty Malware Protection Object Scan Result']
                }
            });
    }
}