import * as cdk from 'aws-cdk-lib';
import { S3Guard } from './s3-guard';
import { Construct } from 'constructs';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as sns from 'aws-cdk-lib/aws-sns';
import * as sub from 'aws-cdk-lib/aws-sns-subscriptions';

export class GuardDutyS3MalwareStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const bucket = this.createBucket();
    const email = this.node.tryGetContext('email');
    const topic = email ? this.createTopic(email) : undefined;
    
    new S3Guard(this, 'Guard', {
      bucketName: bucket.bucketName,
      topic
    });
  }

  private createBucket() {
    const bucket = new s3.Bucket(this, 'Bucket', {
      enforceSSL: true,
      minimumTLSVersion: 1.2,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      encryption: s3.BucketEncryption.S3_MANAGED,
      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL
    });

    new cdk.CfnOutput(this, 'BucketOutput', {
      value: bucket.bucketName,
      exportName: 'test-bucket'
    });

    return bucket;
  }

  private createTopic(email: string) {
    const topic= new sns.Topic(this, 'Topic', {
      topicName: 's3-guard'
    });

    topic.addSubscription(new sub.EmailSubscription(email));
    
    return topic;
  }
}
